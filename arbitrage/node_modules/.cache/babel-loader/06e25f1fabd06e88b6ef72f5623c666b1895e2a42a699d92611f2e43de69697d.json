{"ast":null,"code":"var _jsxFileName = \"/home/yagiz/projects/arbitrage/arbitrage/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [walletAcc, setWalletAcc] = useState([]);\n  let [contracts, setContracts] = useState([]);\n  let [signer, setSigner] = useState(null);\n  const requestAccount = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        console.log(accounts);\n        setWalletAcc(accounts);\n      } catch (error) {\n        alert(\"Could not connect to the Metamask account\");\n      }\n    } else {\n      alert(\"Metamask is not detected\");\n    }\n  };\n  const connectWallet = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signerr = provider.getSigner();\n      console.log(signer);\n    } else {\n      alert(\"Metamask is not detected\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(),\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Wallet Address: \", walletAcc[0]]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: signer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"qHqSkmePb/hPwtmaLAyEEz9Cr6k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","ethers","jsxDEV","_jsxDEV","App","_s","walletAcc","setWalletAcc","contracts","setContracts","signer","setSigner","requestAccount","window","ethereum","accounts","request","method","console","log","error","alert","connectWallet","provider","providers","Web3Provider","signerr","getSigner","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/yagiz/projects/arbitrage/arbitrage/src/App.js"],"sourcesContent":["import './App.css';\nimport {useState} from \"react\";\nimport {ethers} from \"ethers\";\n\nfunction App() {\n  let [walletAcc, setWalletAcc] = useState([]);\n  let [contracts, setContracts] = useState([]);\n  let [signer, setSigner] = useState(null);\n  const requestAccount = async () => {\n    if (window.ethereum){\n      try{\n        const accounts = await window.ethereum.request({\n          method:\"eth_requestAccounts\"\n        });\n        console.log(accounts);\n        setWalletAcc(accounts);\n      }\n      catch(error){\n        alert(\"Could not connect to the Metamask account\");\n      }\n    }\n    else{\n      alert(\"Metamask is not detected\");\n    }\n  }\n\n  const connectWallet = async () => {\n    if(typeof window.ethereum !== \"undefined\") {\n      await requestAccount();\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signerr = provider.getSigner();\n      console.log(signer);\n      \n    }\n    else {\n      alert(\"Metamask is not detected\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <button onClick={()=>connectWallet()}\n        >Connect Wallet</button>\n        <h5>Wallet Address: {walletAcc[0]}</h5>\n        <h5>{signer}</h5>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAAQA,QAAQ,QAAO,OAAO;AAC9B,SAAQC,MAAM,QAAO,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,IAAI,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,IAAI,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,IAAI,CAACU,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAIC,MAAM,CAACC,QAAQ,EAAC;MAClB,IAAG;QACD,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAC7CC,MAAM,EAAC;QACT,CAAC,CAAC;QACFC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;QACrBR,YAAY,CAACQ,QAAQ,CAAC;MACxB,CAAC,CACD,OAAMK,KAAK,EAAC;QACVC,KAAK,CAAC,2CAA2C,CAAC;MACpD;IACF,CAAC,MACG;MACFA,KAAK,CAAC,0BAA0B,CAAC;IACnC;EACF,CAAC;EAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAG,OAAOT,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MACzC,MAAMF,cAAc,EAAE;MACtB,MAAMW,QAAQ,GAAG,IAAItB,MAAM,CAACuB,SAAS,CAACC,YAAY,CAACZ,MAAM,CAACC,QAAQ,CAAC;MACnE,MAAMY,OAAO,GAAGH,QAAQ,CAACI,SAAS,EAAE;MACpCT,OAAO,CAACC,GAAG,CAACT,MAAM,CAAC;IAErB,CAAC,MACI;MACHW,KAAK,CAAC,0BAA0B,CAAC;IACnC;EACF,CAAC;EAED,oBACElB,OAAA;IAAKyB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB1B,OAAA;MAAQyB,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC5B1B,OAAA;QAAQ2B,OAAO,EAAEA,CAAA,KAAIR,aAAa,EAAG;QAAAO,QAAA,EACpC;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAS,eACxB/B,OAAA;QAAA0B,QAAA,GAAI,kBAAgB,EAACvB,SAAS,CAAC,CAAC,CAAC;MAAA;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACvC/B,OAAA;QAAA0B,QAAA,EAAKnB;MAAM;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACV;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACL;AAEV;AAAC7B,EAAA,CA7CQD,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AA+CZ,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}