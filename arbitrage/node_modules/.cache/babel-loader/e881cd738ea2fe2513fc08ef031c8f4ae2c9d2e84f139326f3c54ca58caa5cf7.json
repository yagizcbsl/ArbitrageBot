{"ast":null,"code":"var _jsxFileName = \"/home/yagiz/projects/arbitrage/arbitrage/src/utils/walletProvider.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext();\nexport default WalletContext;\nexport const WalletProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  let [walletAcc, setWalletAcc] = useState(null);\n  let [provider, setProvider] = useState(null);\n  let [signer, setSigner] = useState(null);\n  let [contracts, setContracts] = useState([]);\n  const requestAccount = async () => {\n    if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        setWalletAcc(accounts[0]);\n      } catch (error) {\n        alert(\"Could not connect to the Metamask account\");\n      }\n    } else {\n      alert(\"Metamask is not detected\");\n    }\n  };\n  const connectWallet = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      await requestAccount().B, gN;\n      const providerr = new ethers.providers.Web3Provider(window.ethereum);\n      const signerr = providerr.getSigner();\n      setProvider(providerr);\n      setSigner(signerr);\n    } else {\n      alert(\"Metamask is not detected\");\n    }\n  };\n  const getContract = async (address, abi) => {\n    console.log(address);\n    console.log(abi);\n    let contract = new ethers.Contract(address, abi, signer);\n    let prevs = contracts;\n    prevs.push(contract);\n    setContracts(prevs);\n  };\n  let contextData = {\n    connectWallet: connectWallet,\n    walletAcc: walletAcc,\n    signer: signer,\n    provider: provider,\n    contracts: contracts,\n    getContract: getContract\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: contextData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(WalletProvider, \"Z3NGB04vsFsH1ZzcCKoZefj1+y0=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","ethers","jsxDEV","_jsxDEV","WalletContext","WalletProvider","_ref","_s","children","walletAcc","setWalletAcc","provider","setProvider","signer","setSigner","contracts","setContracts","requestAccount","window","ethereum","accounts","request","method","error","alert","connectWallet","B","gN","providerr","providers","Web3Provider","signerr","getSigner","getContract","address","abi","console","log","contract","Contract","prevs","push","contextData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/yagiz/projects/arbitrage/arbitrage/src/utils/walletProvider.js"],"sourcesContent":["import { createContext, useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst WalletContext = createContext();\n\nexport default WalletContext;\n\nexport const WalletProvider = ({ children }) => {\n\n    let [walletAcc, setWalletAcc] = useState(null);\n    let [provider, setProvider] = useState(null);\n    let [signer,setSigner] = useState(null);\n    let [contracts,setContracts] = useState([]);\n\n    const requestAccount = async () => {\n        if (window.ethereum) {\n            try {\n                const accounts = await window.ethereum.request({\n                    method: \"eth_requestAccounts\"\n                });\n                setWalletAcc(accounts[0]);\n            }\n            catch (error) {\n                alert(\"Could not connect to the Metamask account\");\n            }\n        }\n        else {\n            alert(\"Metamask is not detected\");\n        }\n    }\n\n    const connectWallet = async () => {\n        if (typeof window.ethereum !== \"undefined\") {\n            await requestAccount().B,gN;\n            const providerr = new ethers.providers.Web3Provider(window.ethereum);\n            const signerr = providerr.getSigner();\n            setProvider(providerr);\n            setSigner(signerr);\n        }\n        else {\n            alert(\"Metamask is not detected\");\n        }\n    }\n\n    const getContract = async (address,abi) => {\n        console.log(address);\n        console.log(abi);\n        let contract = new ethers.Contract(address, abi, signer);\n        let prevs = contracts;\n        prevs.push(contract);\n        setContracts(prevs);\n    }\n\n    let contextData = {\n        connectWallet: connectWallet,\n        walletAcc: walletAcc,\n        signer: signer,\n        provider: provider,\n        contracts: contracts,\n        getContract: getContract\n    }\n    \n    return (\n        <WalletContext.Provider value={contextData}>\n            {children}\n        </WalletContext.Provider>\n    )\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,aAAa,gBAAGN,aAAa,EAAE;AAErC,eAAeM,aAAa;AAE5B,OAAO,MAAMC,cAAc,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAEvC,IAAI,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC9C,IAAI,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,IAAI,CAACc,MAAM,EAACC,SAAS,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACvC,IAAI,CAACgB,SAAS,EAACC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAE3C,MAAMkB,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACjB,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAC3CC,MAAM,EAAE;QACZ,CAAC,CAAC;QACFZ,YAAY,CAACU,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC7B,CAAC,CACD,OAAOG,KAAK,EAAE;QACVC,KAAK,CAAC,2CAA2C,CAAC;MACtD;IACJ,CAAC,MACI;MACDA,KAAK,CAAC,0BAA0B,CAAC;IACrC;EACJ,CAAC;EAED,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,OAAOP,MAAM,CAACC,QAAQ,KAAK,WAAW,EAAE;MACxC,MAAMF,cAAc,EAAE,CAACS,CAAC,EAACC,EAAE;MAC3B,MAAMC,SAAS,GAAG,IAAI3B,MAAM,CAAC4B,SAAS,CAACC,YAAY,CAACZ,MAAM,CAACC,QAAQ,CAAC;MACpE,MAAMY,OAAO,GAAGH,SAAS,CAACI,SAAS,EAAE;MACrCpB,WAAW,CAACgB,SAAS,CAAC;MACtBd,SAAS,CAACiB,OAAO,CAAC;IACtB,CAAC,MACI;MACDP,KAAK,CAAC,0BAA0B,CAAC;IACrC;EACJ,CAAC;EAED,MAAMS,WAAW,GAAG,MAAAA,CAAOC,OAAO,EAACC,GAAG,KAAK;IACvCC,OAAO,CAACC,GAAG,CAACH,OAAO,CAAC;IACpBE,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChB,IAAIG,QAAQ,GAAG,IAAIrC,MAAM,CAACsC,QAAQ,CAACL,OAAO,EAAEC,GAAG,EAAEtB,MAAM,CAAC;IACxD,IAAI2B,KAAK,GAAGzB,SAAS;IACrByB,KAAK,CAACC,IAAI,CAACH,QAAQ,CAAC;IACpBtB,YAAY,CAACwB,KAAK,CAAC;EACvB,CAAC;EAED,IAAIE,WAAW,GAAG;IACdjB,aAAa,EAAEA,aAAa;IAC5BhB,SAAS,EAAEA,SAAS;IACpBI,MAAM,EAAEA,MAAM;IACdF,QAAQ,EAAEA,QAAQ;IAClBI,SAAS,EAAEA,SAAS;IACpBkB,WAAW,EAAEA;EACjB,CAAC;EAED,oBACI9B,OAAA,CAACC,aAAa,CAACuC,QAAQ;IAACC,KAAK,EAAEF,WAAY;IAAAlC,QAAA,EACtCA;EAAQ;IAAAqC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACY;AAEjC,CAAC;AAAAzC,EAAA,CA5DYF,cAAc;AAAA4C,EAAA,GAAd5C,cAAc;AAAA,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}